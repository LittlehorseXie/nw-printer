/// <reference types="node" />
export declare class MutableBuffer {
    protected _initialSize: number;
    protected _blockSize: number;
    protected _size: number;
    protected _buffer: Buffer;
    readonly size: number;
    readonly buffer: Buffer;
    readonly nativeBuffer: Buffer;
    constructor(size: number, blockSize: number);
    _ensure(size: number): void;
    capacity(): number;
    clear(): void;
    join(): Buffer;
    flush(): Buffer;
    write(data: any, encoding?: string): this;
    writeCString(data?: string | Buffer, encoding?: string): this;
    writeChar(c: string): this;
    writeUIntLE(value: number, byteLength: number, noAssert?: boolean): this;
    writeUIntBE(value: number, byteLength: number, noAssert?: boolean): this;
    writeUInt8(value: number, noAssert?: boolean): this;
    writeUInt16LE(value: number, noAssert?: boolean): this;
    writeUInt16BE(value: number, noAssert?: boolean): this;
    writeUInt32LE(value: number, noAssert?: boolean): this;
    writeUInt32BE(value: number, noAssert?: boolean): this;
    writeIntLE(value: number, byteLength: number, noAssert?: boolean): this;
    writeIntBE(value: number, byteLength: number, noAssert?: boolean): this;
    writeInt8(value: number, noAssert?: boolean): this;
    writeInt16LE(value: number, noAssert?: boolean): this;
    writeInt16BE(value: number, noAssert?: boolean): this;
    writeInt32LE(value: number, noAssert?: boolean): this;
    writeInt32BE(value: number, noAssert?: boolean): this;
    writeFloatLE(value: number, noAssert?: boolean): this;
    writeFloatBE(value: number, noAssert?: boolean): this;
    writeDoubleLE(value: number, noAssert?: boolean): this;
    writeDoubleBE(value: number, noAssert?: boolean): this;
}
